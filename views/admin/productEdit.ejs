<!DOCTYPE HTML>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Edit Product</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="/adminAssets/AdProductAssets/css/main.css" rel="stylesheet" type="text/css" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    

<!-- Bootstrap CSS -->
   <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">


    <style>
        .preview-image {
            max-width: 200px;
            max-height: 200px;
            margin: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 5px;
        }
        
        .image-preview-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin: 15px 0;
        }
        
        .image-container {
            position: relative;
            display: inline-block;
        }
        
        /* .delete-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background: rgba(255, 0, 0, 0.7);
            color: white;
            border: none;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            cursor: pointer;
        } */

        .delete-btn {
    position: absolute;
    top: 5px;
    right: 5px;
    background: rgba(255, 0, 0, 0.7);
    color: white;
    border: none;
    border-radius: 50%;
    width: 25px;
    height: 25px;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 16px; /* Icon/Text size */
    font-weight: bold; /* Bold cross if using &times; */
}

.delete-btn i {
    font-size: 14px; /* Font Awesome icon size */
}

    

        
        .form-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .validation-error {
            color: red;
            font-size: 0.875rem;
            margin-top: 5px;
        }
        
        .required-field::after {
            content: "*";
            color: red;
            margin-left: 4px;
        }
    </style>
     <style>
        .crop-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-bottom: 20px;
        }
        .cropped-image {
            margin-top: 10px;
            max-width: 100px;
            max-height: 100px;
        }
    </style>
</head>

   
    <div class="screen-overlay"></div>
    
    <!-- Your existing sidebar code here -->
    <aside class="navbar-aside" id="offcanvas_aside">
        <div class="aside-top">
            <a href="index.html" class="brand-wrap">
                <img src="/adminAssets/AdProductAssets/imgs/theme/logo.svg" class="logo" alt="Nest Dashboard">
            </a>
            <div>
                <button class="btn btn-icon btn-aside-minimize"> <i class="text-muted material-icons md-menu_open"></i> </button>
            </div>
        </div>
        <nav>
            <ul class="menu-aside">
                <li class="menu-item">
                    <a class="menu-link" href="/admin/dashboard"> <i class="icon material-icons md-home"></i>
                        <span class="text">Dashboard</span>
                    </a>
                </li>
               
                
                <li class="menu-item ">
                    <a class="menu-link" href="/admin/AllProducts">
                        <i class="icon material-icons md-shopping_bag"></i>
                        <span class="text">Products</span>
                    </a>
                    
                    <li class="menu-item">
                        <a class="menu-link" href="/admin/adCategory">
                            <i class="icon material-icons md-category"></i>
                            <span class="text">Categories</span>
                        </a>
                    </li>
                </li>
                <li class="menu-item ">
                    <a class="menu-link" href="#">
                        <i class="icon material-icons md-shopping_cart"></i>
                        <span class="text">Orders</span>
                    </a>
                 
                </li>
                <li class="menu-item ">
                    <a class="menu-link" href="#">
                        <i class="icon material-icons md-monetization_on"></i>
                        <span class="text">Coupons</span>
                    </a>
                    </li>
                    <li class="menu-item has-submenu">
                        <a class="menu-link" href="#">
                            <i class="icon material-icons md-local_offer"></i>
                            <span class="text">offers</span>
                            
                        </a>
                        <div class="submenu">
                        <a href="#">View offer</a>
                        <a href="#">Add offer</a>
                    </div>
                       
                        </li>
                        <li class="menu-item ">
                            <a class="menu-link" href="/admin/adminUsers">
                                <i class="icon material-icons md-person"></i> 
                                <span class="text">Users</span>
                            </a>
                            </li>                                  
                   
                </li>
                
                <li class="menu-item">
                    <a class="menu-link" href="#"> <i class="icon material-icons md-stars"></i> <span class="text">Brands</span> </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" disabled href="#">
                        <i class="icon material-icons md-pie_chart"></i>
                        <span class="text">Sales Report</span>
                    </a>
                </li>
            </ul>
            <hr />          
                
            </ul>
           
            <br>
            <br>
        </nav>
    </aside>
    
    <main class="main-wrap">
        <header class="main-header navbar">
            <div class="col-search">
                <form class="searchform">
                    <div class="input-group">
                        <input list="search_terms" type="text" class="form-control" placeholder="Search term">
                        <button class="btn btn-light bg" type="button"> <i class="material-icons md-search"></i></button>
                    </div>
                    <datalist id="search_terms">
                        <option value="Products">
                        <option value="New orders">
                        <option value="Apple iphone">
                        <option value="Ahmed Hassan">
                    </datalist>
                </form>
            </div>
            <div class="col-nav">
                <button class="btn btn-icon btn-mobile me-auto" data-trigger="#offcanvas_aside"> <i class="material-icons md-apps"></i> </button>
                <ul class="nav">
                    <li class="nav-item">
                        <a class="nav-link btn-icon" href="#">
                            <i class="material-icons md-notifications animation-shake"></i>
                            <span class="badge rounded-pill">3</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link btn-icon darkmode" href="#"> <i class="material-icons md-nights_stay"></i> </a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="requestfullscreen nav-link btn-icon"><i class="material-icons md-cast"></i></a>
                    </li>
                    <li class="dropdown nav-item">
                        <a class="dropdown-toggle" data-bs-toggle="dropdown" href="#" id="dropdownLanguage" aria-expanded="false"><i class="material-icons md-public"></i></a>
                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownLanguage">
                            <a class="dropdown-item text-brand" href="#"><img src="/adminAssets/AdProductAssets/imgs/theme/flag-us.png" alt="English">English</a>
                            <a class="dropdown-item" href="#"><img src="/adminAssets/AdProductAssets/imgs/theme/flag-fr.png" alt="Français">Français</a>
                            <a class="dropdown-item" href="#"><img src="/adminAssets/AdProductAssets/imgs/theme/flag-jp.png" alt="Français">日本語</a>
                            <a class="dropdown-item" href="#"><img src="/adminAssets/AdProductAssets/imgs/theme/flag-cn.png" alt="Français">中国人</a>
                        </div>
                    </li>
                    <li class="dropdown nav-item">
                        <a class="dropdown-toggle" data-bs-toggle="dropdown" href="#" id="dropdownAccount" aria-expanded="false"> <img class="img-xs rounded-circle" src="/adminAssets/AdProductAssets/imgs/people/avatar-2.png" alt="User"></a>
                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownAccount">
                            <a class="dropdown-item" href="#"><i class="material-icons md-perm_identity"></i>Edit Profile</a>
                            <a class="dropdown-item" href="#"><i class="material-icons md-settings"></i>Account Settings</a>
                            <a class="dropdown-item" href="#"><i class="material-icons md-account_balance_wallet"></i>Wallet</a>
                            <a class="dropdown-item" href="#"><i class="material-icons md-receipt"></i>Billing</a>
                            <a class="dropdown-item" href="#"><i class="material-icons md-help_outline"></i>Help center</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item text-danger" href="#"><i class="material-icons md-exit_to_app"></i>Logout</a>
                        </div>
                    </li>
                </ul>
            </div>
        </header>
        <section class="content-main">
            <div class="form-container">
                <div class="content-header">
                    <h2 class="content-title">Edit Product</h2>
                </div>
                
                <% if (error) { %>
                    <div class="alert alert-danger" role="alert">
                        <%= error %>
                    </div>
                <% } %>
                
                <% if (success) { %>
                    <div class="alert alert-success" role="alert">
                        <%= success %>
                    </div>
                <% } %>

                <form action="/admin/editProduct/<%= product._id %>" method="POST" enctype="multipart/form-data" id="productForm" class="needs-validation" novalidate>
                    <!-- Basic Information -->
                    <div class="card mb-4">
                        <div class="card-body">
                            <div class="mb-3">
                                <label for="productName" class="form-label required-field">Name</label>
                                <input type="text" 
                                       class="form-control" 
                                       id="productName" 
                                       name="name" 
                                       value="<%= product.name %>" 
                                       >
                                <div class="invalid-feedback">Please enter product name</div>
                            </div>

                            <div class="mb-3">
                                <label for="productDescription" class="form-label required-field">Description</label>
                                <textarea class="form-control" 
                                          id="productDescription" 
                                          name="description" 
                                          rows="3"><%= product.description %></textarea>
                            </div>

                            <!-- Price and Stock -->
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="productPrice" class="form-label required-field">Price</label>
                                        <input type="number" 
                                               class="form-control" 
                                               id="productPrice" 
                                               name="price" 
                                               value="<%= product.price %>" 
                                               min="0" 
                                               step="0.01" 
                                               >
                                        <div class="invalid-feedback">Please enter a valid price</div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-4">
                                            <label class="form-label">Discount</label>
                                            <input type="number" 
                                                   placeholder="Discount" 
                                                   name="discount"  
                                                   class="form-control" 
                                                   value="<%= product.discount %>">
                                            <div class="error-message text-danger" id="discount-error"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="productSpecification" class="form-label required-field">Specification</label>
                                            <textarea class="form-control" 
                                                      id="productSpecification" 
                                                      name="spec" 
                                                      rows="3" 
                                                      ><%= product.spec %></textarea>
                                            <div class="invalid-feedback">Please enter the specifications</div>
                                        </div>
                                    </div>
                                    <!-- Add this hidden debug element -->
                              <div id="debug-info" style="display:none;">
                           <pre class="spec-value"></pre>
                              </div>

                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="productStock" class="form-label required-field">Stock</label>
                                        <input type="number" 
                                               class="form-control" 
                                               id="productStock" 
                                               name="stock" 
                                               value="<%= product.stock %>" 
                                               min="0" 
                                               >
                                        <div class="invalid-feedback">Please enter valid stock quantity</div>
                                    </div>
                                </div>
                            </div>

                            <!-- Category and Material -->
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="productCategory" class="form-label required-field">Category</label>
                                        <select class="form-select" id="productCategory" name="category" >
                                            <option value="">Select Category</option>
                                            <% categories.forEach(category => { %>
                                                <option value="<%= category._id %>" 
                                                        <%= product.category && product.category.equals(category._id) ? 'selected' : '' %>>
                                                    <%= category.name %>
                                                </option>
                                            <% }); %>
                                        </select>
                                        <div class="invalid-feedback">Please select a category</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="productMaterial" class="form-label required-field">Material</label>
                                        <input type="text" 
                                               class="form-control" 
                                               id="productMaterial" 
                                               name="material" 
                                               value="<%= product.material %>" 
                                               >
                                        <div class="invalid-feedback">Please enter material</div>
                                    </div>
                                </div>
                            </div>

                            <!-- Dimensions -->
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label for="width" class="form-label">Width (cm)</label>
                                        <input type="number" 
                                               class="form-control" 
                                               id="width" 
                                               name="width" 
                                               value="<%= product.width %>" 
                                               min="0" 
                                               step="0.1">
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label for="height" class="form-label">Height (cm)</label>
                                        <input type="number" 
                                               class="form-control" 
                                               id="height" 
                                               name="height" 
                                               value="<%= product.height %>" 
                                               min="0" 
                                               step="0.1">
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label for="depth" class="form-label">Depth (cm)</label>
                                        <input type="number" 
                                               class="form-control" 
                                               id="depth" 
                                               name="depth" 
                                               value="<%= product.depth %>" 
                                               min="0" 
                                               step="0.1">
                                    </div>
                                </div>
                            </div>

                            <!-- Images -->
                            <div class="mb-4">
                                <label class="form-label">Current Images</label>
                                <div class="image-preview-container">
                                    <% product.image.forEach((image, index) => { %>
                                        <div class="image-container">
                                            <img src="/uploads/<%= image %>" 
                                                 alt="Product Image" 
                                                 class="preview-image">
                                            <button type="button" 
                                                    class="delete-btn delete-icon" 
                                                    onclick="confirmDelete('<%= index %>','<%= product._id %>')">
                                                    <i class="fas fa-times"></i>
                                            </button>
                                        </div>
                                    <% }) %>
                                </div>
                            </div>
                          
                            <div class="crop-container">
                                <label>Upload Images</label>
                                <input type="file" id="fileInput" multiple><br>
                               
                            </div>
                            
                            <input type="hidden" name="croppedImages" id="croppedImages">
                                                   
            
                            <button type="submit" class="btn btn-primary">Update Product</button>
                            
                        </div>
                    </div>
                </form>
            </div>
        </section>

        <!-- cropping modal  -->
        <!-- <div id="cropModal" class="modal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Crop Image</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div>
                            <img id="cropImage" style="max-width: 100%; max-height: 400px;" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="cropSaveBtn">Save Crop</button>
                    </div>
                </div>
            </div>
        </div> -->
        
         <!-- Crop Modal -->
    <!-- <div id="crop-modal" style="display: none;">
        <div>
            <img id="crop-image" style="max-width: 100%;">
            <button id="crop-save">Save Cropped Image</button>
        </div>
    </div> -->
    </main>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>

<!-- Cropper.js JavaScript -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>



<!-- cropping script  -->

<!-- <script>
    let cropper;
let croppedCanvas;

function showCropModal(file) {
    const modal = document.getElementById('cropModal');
    const image = document.getElementById('cropImage');

    // Read the selected file and load it into the modal image
    const reader = new FileReader();
    reader.onload = (e) => {
        image.src = e.target.result;

        // Wait for the modal to show before initializing Cropper
        const bsModal = new bootstrap.Modal(modal);
        bsModal.show();

        bsModal._element.addEventListener('shown.bs.modal', () => {
            cropper = new Cropper(image, {
                aspectRatio: 1, // Adjust aspect ratio as needed
                viewMode: 2,
                autoCropArea: 1,
            });
        });
    };
    reader.readAsDataURL(file);
}

function cropImage() {
    if (cropper) {
        croppedCanvas = cropper.getCroppedCanvas();
        const croppedImage = croppedCanvas.toDataURL('image/png');

        // Destroy the cropper instance
        cropper.destroy();
        cropper = null;

        // Append the cropped image to the preview container
        const preview = document.getElementById('newImagePreview');
        const div = document.createElement('div');
        div.className = 'image-container';

        const img = document.createElement('img');
        img.src = croppedImage;
        img.className = 'preview-image';

        div.appendChild(img);
        preview.appendChild(div);

        // Close the modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('cropModal'));
        modal.hide();
    }
}

document.getElementById('cropSaveBtn').addEventListener('click', cropImage);

</script> -->

/////

<!-- <script>
    document.addEventListener('DOMContentLoaded', () => {
    const imageInput = document.getElementById('newImages');
    const cropModal = document.getElementById('cropModal');
    const cropSaveBtn = document.getElementById('cropSaveBtn');
    const cropImage = document.getElementById('cropImage');

    let cropper;

    // When an image is selected, show crop modal
    imageInput.addEventListener('change', (e) => {
        if (e.target.files.length > 0) {
            const file = e.target.files[0];
            const reader = new FileReader();
            
            reader.onload = (event) => {
                cropImage.src = event.target.result;
                
                // Destroy existing cropper if it exists
                if (cropper) {
                    cropper.destroy();
                }
                
                // Initialize new cropper
                cropper = new Cropper(cropImage, {
                    aspectRatio: 1, // Square crop
                    viewMode: 2,
                    dragMode: 'move',
                    autoCropArea: 1
                });

                // Show modal (assuming you're using Bootstrap)
                const bsModal = new bootstrap.Modal(cropModal);
                bsModal.show();
            };

            reader.readAsDataURL(file);
        }
    });

    // Save cropped image
    document.getElementById('cropSaveBtn').addEventListener('click', () => {
    croppedCanvas.toBlob((blob) => {
        const reader = new FileReader();
        reader.onloadend = () => {
            // Get base64 string from the cropped image
            const base64Data = reader.result;

            // Check if hidden input for cropped image already exists
            let croppedImageInput = document.getElementById('croppedImageInput');
            if (!croppedImageInput) {
                // If not, create one
                croppedImageInput = document.createElement('input');
                croppedImageInput.type = 'hidden';
                croppedImageInput.id = 'croppedImageInput';
                croppedImageInput.name = 'croppedImage';
                document.getElementById('productForm').appendChild(croppedImageInput);
            }

            // Set the value of the hidden input to the base64 data
            croppedImageInput.value = base64Data;
        };
        reader.readAsDataURL(blob); // Convert blob to base64
    });
});
    })
</script> -->

<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script> -->
<!-- <script>
    const fileInput = document.getElementById("fileInput");
    const newImagePreview = document.getElementById("newImagePreview");
    const currentImagesPreview = document.getElementById("currentImagesPreview");
    const croppedImagesInput = document.getElementById("croppedImages");

    const cropperInstances = []; // Array to store Cropper instances
    let deletedImages = []; // Array to track deleted images

    // Handle file input change
    fileInput.addEventListener("change", () => {
        newImagePreview.innerHTML = ""; // Clear existing previews
        cropperInstances.length = 0; // Clear cropper instances

        Array.from(fileInput.files).forEach((file, index) => {
            const img = document.createElement("img");
            img.src = URL.createObjectURL(file);
            img.style.maxWidth = "200px";
            img.style.margin = "10px";

            const cropContainer = document.createElement("div");
            cropContainer.appendChild(img);

            // Add a "Crop" button
            const cropButton = document.createElement("button");
            cropButton.textContent = "Crop";
            cropButton.type = "button"; // Prevent form submission
            cropButton.style.display = "block";
            cropButton.style.margin = "10px";
            cropContainer.appendChild(cropButton);

            // Add a canvas for cropped image preview
            const cropCanvas = document.createElement("canvas");
            cropCanvas.style.border = "1px solid #ccc"; // Styling for clarity
            cropCanvas.style.margin = "10px";
            cropContainer.appendChild(cropCanvas);

            newImagePreview.appendChild(cropContainer);

            let cropper;

            img.onload = () => {
                cropper = new Cropper(img, {
                    aspectRatio: 1, // Adjust aspect ratio as needed
                    viewMode: 1,
                });
                cropperInstances.push(cropper);
            };

            // Handle cropping
            cropButton.addEventListener("click", () => {
                if (cropper) {
                    const canvas = cropper.getCroppedCanvas();
                    if (canvas) {
                        cropCanvas.width = canvas.width;
                        cropCanvas.height = canvas.height;
                        const ctx = cropCanvas.getContext("2d");
                        ctx.drawImage(canvas, 0, 0);

                        // Add cropped image to the preview
                        const croppedImg = document.createElement("img");
                        croppedImg.src = canvas.toDataURL();
                        croppedImg.style.maxWidth = "200px";
                        currentImagesPreview.appendChild(croppedImg);
                    }
                }
            });
        });
    });
// Handle form submission
    document.querySelector("form").addEventListener("submit", (e) => {
        const croppedData = cropperInstances.map((cropper) => cropper.getData());
        croppedImagesInput.value = JSON.stringify(croppedData); // Attach cropped data
    });
</script> -->


      <script>
       
        
const ProductFormHandler = {
    init() {
        this.form = document.getElementById('productForm');
        this.setupFormValidation();
        this.setupImagePreview();
        this.setupDebugListeners();
    },

    // Validation rules for form fields
    validationRules: {
        productName: { 
            message: 'Product name is required',
            validate: (value) => value.trim() !== ''
        },
        productDescription: { 
            message: 'Description is required',
            validate: (value) => value.trim() !== ''
        },
        productPrice: { 
            message: 'Valid price is required',
            validate: (value) => value !== '' && !isNaN(value) && Number(value) >= 0
        },
        productStock: { 
            message: 'Valid stock quantity is required',
            validate: (value) => value !== '' && !isNaN(value) && Number(value) >= 0
        },
        productCategory: { 
            message: 'Category is required',
            validate: (value) => value.trim() !== ''
        },
        productMaterial: { 
            message: 'Material is required',
            validate: (value) => value.trim() !== ''
        },
        productSpecification: { 
            message: 'Specification is required',
            validate: (value) => value.trim() !== ''
        }
    },

    setupFormValidation() {
        if (!this.form) return;

        this.form.addEventListener('submit', (event) => {
            // event.preventDefault()
            if (!this.validateForm()) {
                event.preventDefault();
                event.stopPropagation();
            }
        });

        // Real-time validation
        this.form.querySelectorAll('input, select, textarea').forEach(field => {
            field.addEventListener('input', () => {
                if (field.classList.contains('is-invalid')) {
                    if (this.validateField(field)) {
                        this.clearError(field);
                    }
                }
            });
        });
    },

    validateForm() {
        let isValid = true;
        
        Object.entries(this.validationRules).forEach(([fieldId, rule]) => {
            const field = document.getElementById(fieldId);
            if (!field) return;

            if (!rule.validate(field.value)) {
                this.showError(field, rule.message);
                isValid = false;
            } else {
                this.clearError(field);
            }
        });

        return isValid;
    },

    validateField(field) {
        const rule = this.validationRules[field.id];
        return rule ? rule.validate(field.value) : true;
    },

    showError(element, message) {
        element.classList.add('is-invalid');
        const feedback = element.nextElementSibling;
        if (feedback?.classList.contains('invalid-feedback')) {
            feedback.textContent = message;
        }
    },

    clearError(element) {
        element.classList.remove('is-invalid');
    },

    setupImagePreview() {
        const imageInput = document.querySelector('input[type="file"]');
        if (imageInput) {
            imageInput.addEventListener('change', (e) => this.previewImages(e.target));
        }
    },

    previewImages(input) {
        const preview = document.getElementById('newImagePreview');
        if (!preview) return;

        preview.innerHTML = '';

        if (input.files) {
            Array.from(input.files).forEach(file => {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const div = document.createElement('div');
                    div.className = 'image-container';
                    
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.className = 'preview-image';
                    
                    div.appendChild(img);
                    preview.appendChild(div);
                };
                reader.readAsDataURL(file);
            });
        }
    },

    setupDebugListeners() {
        if (this.form) {
            this.form.addEventListener('submit', (e) => {
                const specField = document.getElementById('productSpecification');
                if (specField) {
                    console.log('Spec value at submission:', specField.value);
                    console.log('Spec length:', specField.value.length);
                    console.log('Spec trimmed length:', specField.value.trim().length);
                    
                    const debugElement = document.querySelector('.spec-value');
                    if (debugElement) {
                        debugElement.textContent = specField.value;
                    }
                }
            });
        }
    }
};

// Image deletion handler
function confirmDelete(index, productId) {
    if (typeof Swal === 'undefined') {
        if (confirm('Are you sure you want to delete this image?')) {
            window.location.href = `/admin/deleteimage?index=${index}&id=${productId}`;
        }
        return;
    }

    Swal.fire({
        title: 'Are you sure?',
        text: 'You won\'t be able to revert this!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
        if (result.isConfirmed) {
            window.location.href = `/admin/deleteimage?index=${index}&id=${productId}`;
        }
    });
}

// Initialize the form handler when the DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    ProductFormHandler.init();
});
    </script>  